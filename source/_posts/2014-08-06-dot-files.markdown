---
layout: post
title: "Dot files"
date: 2014-08-06 09:56:03 -0400
comments: true
categories: 
published: true
---

Dotfiles fascinate me. I enjoy stumbling across a developer's github and taking
a look into their dotfiles. Its a great way to discover useful aliases or
functions. Even new tools can be discovered when I see a previously unknown
dotfile. Each dotfile repo also contains a living bio of the developer. One can
easily learn what OS the developer uses, what programing languages they use the
most, what tools they prefer.

Recently many of my co-workers switched from a development environment of
`Windows + Putty + Linux Server` to running Linux locally. The big draw for
them was seeing me using [spectrwm], a tiling window manager. Some have decided
to go with [Ubuntu minimal] with [i3], while others have followed me down the
joyous path of [Gentoo] and [spectrwm]. Either way everyone took the
opportunity to examine my dotfiles and grab the parts they liked.

At this point I have read through my own dotfiles several times as I explained
the purpose of each file (I also took this opportunity to clean up some bad
practices), thus it seems like a first post to dive into some of my dots and
explain them. For the Unix aficionado much of this may be obvious, for those
new to Linux or working on the terminal there should be many useful tips.
Hopefully there is some value for everyone.

The Install
-----------

Installing the dotfiles is obviously important. The install script should be in
a language that is already installed on the system. I use bash for my install
script as it is rare to find a Linux system without it. A ruby rakefile seems
to be a common choice, which makes sense for ruby/rails developers as they
would never be without ruby.

The top of the bash script deals with providing help and parsing some optional
arguments. The core of the bash script involves setting symlinks between the
files to a dot version in my home directory.

``` bash Core symlink creation
pushd $(dirname $0) &> /dev/null

for dot in $(ls); do
    if [[ ! $dot == "README.rst" ]] && [[ ! $dot == "install.sh" ]] && [[ ! $dot == "terminfo" ]]; then
        target="$HOME/.$dot"

        if [[ $pretend -eq 1 ]]; then
            echo "Would set $dot"
        else
            # Make a .bak of a file or dir
            if [[ ! -h $target ]]; then
                if [[ -d $target ]] || [[ -f $target ]]; then
                    mv $target $target.bak
                fi
            fi

            echo "Setting $dot"
            ln -sf "$PWD/$dot" "$target"
        fi
    fi
done
```

This section first changes directory to the location of the install script.
Then loops over each file in the directory. If the file isn't the `README.rst`,
the `install.sh` itself, or the `terminfo` directory (more on that last one
later) then a symlink will be created. But first it checks if there already is
a non-symlink file in place, and makes a backup of it first. Also note the
conditional checking the `$pretend` variable. This is used throughout the
script to only print what it will do rather than doing if the `--pretend` arg
is passed in.



[spectrwm]: https://opensource.conformal.com/wiki/spectrwm
[Ubuntu minimal]: https://help.ubuntu.com/community/Installation/MinimalCD
[i3]: http://i3wm.org/
[Gentoo]: https://www.gentoo.org/
